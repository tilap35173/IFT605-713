val TAG_FileName = "maison.rules"
val notification_email = "projetift7132024idmnw@proton.me"

// System Startup Rule
rule "Démarrage de openHAB"
when
    System started
then
    logInfo(TAG_FileName, "Rule : Démarrage de openHAB")
    TestNotifications_MotionSensor.postUpdate(OFF)
    TestNotifications_DoorSensor.postUpdate(OFF)
    TestNotifications_WindowSensor.postUpdate(OFF)
end

// Motion Detection Rules
rule "Turn on light when motion detected"
when
    Item Simulated_MotionSensor changed to ON
then
    if (Manual_Light_Switch.state == OFF) {
        logInfo("MotionRule", "Motion detected, turning on the light.")
        Light_Controlled.sendCommand(ON)
    }
end

rule "Turn off light after inactivity"
when
    Item Simulated_MotionSensor changed to OFF
then
    logInfo("MotionRule", "No motion detected, setting a timer to turn off the light.")
    createTimer(now.plusMinutes(1)) [ |
        if (Simulated_MotionSensor.state == OFF && Manual_Light_Switch.state == OFF) {
            logInfo("MotionRule", "Turning off the light after inactivity.")
            Light_Controlled.sendCommand(OFF)
        }
    ]
end

rule "Manual light control"
when
    Item Manual_Light_Switch changed
then
    if (Manual_Light_Switch.state == ON) {
        logInfo("ManualControl", "Manual switch turned on, turning on the light.")
        Light_Controlled.sendCommand(ON)
    } else {
        logInfo("ManualControl", "Manual switch turned off, turning off the light.")
        Light_Controlled.sendCommand(OFF)
    }
end

// Intrusion Detection Rules
rule "Door intrusion alert"
when
    Item Simulated_DoorSensor changed to ON
then
    logInfo("IntrusionAlert", "Intrusion detected: Door sensor triggered!")
    sendNotification(notification_email, "Intrusion detected: Door sensor triggered!")
    Intrusion_Alert.sendCommand(ON)
end

rule "Window intrusion alert"
when
    Item Simulated_WindowSensor changed to ON
then
    logInfo("IntrusionAlert", "Intrusion detected: Window sensor triggered!")
    sendNotification(notification_email, "Intrusion detected: Window sensor triggered!")
    Intrusion_Alert.sendCommand(ON)
end

rule "Reset intrusion alert"
when
    Item Intrusion_Alert changed to OFF
then
    logInfo("IntrusionAlert", "Intrusion alert reset.")
end

// Notifications
rule "Notification test"
when
    Item TestNotifications changed to ON
then
    sendNotification(notification_email, "Test : Notification test")
    logInfo("NotificationTest", "Test notification sent.")
    TestNotifications.postUpdate(OFF)
end

rule "Motion sensor notification test"
when
    Item TestNotifications_MotionSensor changed to ON
then
    sendNotification(notification_email, "Test : Motion detected")
    logInfo("NotificationTest", "Test motion sensor notification sent.")
    TestNotifications_MotionSensor.postUpdate(OFF)
end

rule "Door sensor notification test"
when
    Item TestNotifications_DoorSensor changed
then
    if (TestNotifications_DoorSensor.state == ON) {
        sendNotification(notification_email, "Test : Door opened")
    } else {
        sendNotification(notification_email, "Test : Door closed")
    }
    logInfo("NotificationTest", "Test door sensor notification sent.")
end

rule "Window sensor notification test"
when
    Item TestNotifications_WindowSensor changed
then
    if (TestNotifications_WindowSensor.state == ON) {
        sendNotification(notification_email, "Test : Window opened")
    } else {
        sendNotification(notification_email, "Test : Window closed")
    }
    logInfo("NotificationTest", "Test window sensor notification sent.")
end

rule "Water level notification"
when
    Item WaterLevel changed
then
    val waterLevelLimit = 5
    if ((WaterLevel.state as Number) >= waterLevelLimit) {
        sendNotification(notification_email, "High water level : " + WaterLevel.state.toString + " cm")
        logInfo("WaterLevel", "High water level detected : " + WaterLevel.state.toString + " cm")
    }
end

// Water Level Simulation

rule "Water level simulation"
when
    Item Simulated_WaterLevel changed
then
    WaterLevel.postUpdate(Simulated_WaterLevel.state)
end


rule "Auto configuration on startup"
when
    System started
then
    logInfo("AutoConfig", "Initializing default configuration...")

    // Initialisation des capteurs
    Simulated_MotionSensor.postUpdate(OFF)
    Simulated_DoorSensor.postUpdate(OFF)
    Simulated_WindowSensor.postUpdate(OFF)
    Intrusion_Alert.postUpdate(OFF)
    Manual_Light_Switch.postUpdate(OFF)

    logInfo("AutoConfig", "Default configuration initialized.")
end

rule "Auto-configuration et réparation au démarrage"
when
    System started
then
    logInfo("AutoConfig", "Démarrage d'OpenHAB : Vérification et initialisation des configurations...")

    // Vérification et initialisation des capteurs
    if (Simulated_MotionSensor.state == NULL) Simulated_MotionSensor.postUpdate(OFF)
    if (Simulated_DoorSensor.state == NULL) Simulated_DoorSensor.postUpdate(OFF)
    if (Simulated_WindowSensor.state == NULL) Simulated_WindowSensor.postUpdate(OFF)
    if (Intrusion_Alert.state == NULL) Intrusion_Alert.postUpdate(OFF)
    if (Manual_Light_Switch.state == NULL) Manual_Light_Switch.postUpdate(OFF)
    if (Light_Controlled.state == NULL) Light_Controlled.postUpdate(OFF)

    // Initialisation des notifications de test
    if (TestNotifications.state == NULL) TestNotifications.postUpdate(OFF)
    if (TestNotifications_MotionSensor.state == NULL) TestNotifications_MotionSensor.postUpdate(OFF)
    if (TestNotifications_DoorSensor.state == NULL) TestNotifications_DoorSensor.postUpdate(OFF)
    if (TestNotifications_WindowSensor.state == NULL) TestNotifications_WindowSensor.postUpdate(OFF)

    logInfo("AutoConfig", "Configuration initialisée avec succès.")
end

rule "Redémarrage automatique des Things défectueux"
when
    Thing "mqtt:broker:myBroker" changed from ONLINE to OFFLINE
then
    logWarn("AutoRepair", "Le broker MQTT est hors ligne. Tentative de redémarrage...")
    executeCommandLine("sudo systemctl restart openhab", 5000)
end
