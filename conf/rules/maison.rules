val TAG_FileName = "maison.rules"
val notification_email = "projetift7132024idmnw@proton.me"

// System Startup Rule
rule "Démarrage de openHAB"
when
    System started
then
    logInfo(TAG_FileName, "Rule : Démarrage de openHAB")
    mouvement.postUpdate(OFF)
    porte.postUpdate(OFF)
    fenetre.postUpdate(OFF)
    WaterLevel.postUpdate(0)
end

// Motion Detection Rules
rule "Turn on light when motion detected"
when
    Item Simulated_MotionSensor changed to ON
then
    if (Manual_Light_Switch.state == OFF) {
        logInfo("MotionRule", "Motion detected, turning on the light.")
        Light_Controlled.sendCommand(ON)
    }
end

rule "Turn off light after inactivity"
when
    Item Simulated_MotionSensor changed to OFF
then
    logInfo("MotionRule", "No motion detected, setting a timer to turn off the light.")
    createTimer(now.plusMinutes(1)) [ |
        if (Simulated_MotionSensor.state == OFF && Manual_Light_Switch.state == OFF) {
            logInfo("MotionRule", "Turning off the light after inactivity.")
            Light_Controlled.sendCommand(OFF)
        }
    ]
end

rule "Manual light control"
when
    Item Manual_Light_Switch changed
then
    if (Manual_Light_Switch.state == ON) {
        logInfo("ManualControl", "Manual switch turned on, turning on the light.")
        Light_Controlled.sendCommand(ON)
    } else {
        logInfo("ManualControl", "Manual switch turned off, turning off the light.")
        Light_Controlled.sendCommand(OFF)
    }
end

// Intrusion Detection Rules
rule "Door intrusion alert"
when
    Item Simulated_DoorSensor changed to ON
then
    logInfo("IntrusionAlert", "Intrusion detected: Door sensor triggered!")
    Intrusion_Alert.sendCommand(ON)
end

rule "Window intrusion alert"
when
    Item Simulated_WindowSensor changed to ON
then
    logInfo("IntrusionAlert", "Intrusion detected: Window sensor triggered!")
    Intrusion_Alert.sendCommand(ON)
end

rule "Reset intrusion alert"
when
    Item Intrusion_Alert changed to OFF
then
    logInfo("IntrusionAlert", "Intrusion alert reset.")
end

// Notifications
rule "Test de notification"
when
    Item notification changed to ON
then
    sendNotification(notification_email, "Test")
    notification.postUpdate(OFF)
end

rule "Notification de mouvement"
when
    Item mouvement changed to ON
then
    sendNotification(notification_email, "Mouvement détecté")
    mouvement.postUpdate(OFF)
end

rule "Notification de porte"
when
    Item porte changed
then
    if (porte.state == ON) {
        sendNotification(notification_email, "Porte ouverte")
    } else {
        sendNotification(notification_email, "Porte fermée")
    }
end

rule "Notification de fenêtre"
when
    Item fenetre changed
then
    if (fenetre.state == ON) {
        sendNotification(notification_email, "Fenêtre ouverte")
    } else {
        sendNotification(notification_email, "Fenêtre fermée")
    }
end

rule "Notification de niveau d'eau"
when
    Item WaterLevel changed
then
    val seuilNiveauEau = 5
    if ((WaterLevel.state as Number) >= seuilNiveauEau) {
        sendNotification(notification_email, "Niveau d'eau élevé : " + WaterLevel.state.toString + " cm")
    }
end
